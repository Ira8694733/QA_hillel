//Вам необхідно вказати, яким буде результат операції та описати крок за кроком у вигляді коментарів, як відбувається перетворення в кожному прикладі:

console.log('number' + 3 + 3) // number33 // Додавання зі строкою, тому натупні 3 в даному випадку будуть перетворені в строку 
console.log(null + 3) // 3 // При математичних операціях null перетворюється в 0 => 0+3=3
console.log(5 && "qwerty") // "qwerty" // Значення 5 у логічному контексті вважається "справжнім", "qwerty" також -"справжнім".
// оскільки обидва операнди є "істинними", оператор && поверне другий операнд, тобто "qwerty"
console.log(+'40' + +'2' + "hillel") // 42hillel  // + перетворює String '40', '2' в Number => Number 42 + "hillel".
console.log('10' - 5 === 6) // false // віднімання здійснюється лише з числами, тому String '10' перетворюэться в Number 10.
// 10-5=5. 5 не дорівнює 6
console.log(true + false) //0 // true це 1, false - 0
console.log('4px' - 3) // NaN // В данному випадку JS не розуміє що таке '4px', а саме це String чи Number.
console.log('4' - 3) // 1 // віднімання здійснюється лише з числами, тому String '4' перетворюэться в Number 4.
console.log('6' + 3 ** 0) // 61 // У цьому виразі відбувається конкатенація '6' та значення виразу 3**0.
// Оператор** означає зведення в ступінь. В даному випадку, 3**0 = 1. Оскільки '6' є String , JS інтерпретує інші операнди як String,
// щоб уникнути чисельного обчислення => конкатинація String '6' + String '1'= '61'.
console.log(12 / '6') // 2 // В даному випадку '/' перетворється String '6'  на Number
console.log('10' + (5 === 6)) // 10false //  5 === 6 - false. String '10' залишається рядком => 
// вираз зводиться до конкатенації рядків '10' та 'false'.
console.log(null == '') // false // При спробі порівняння, null приводиться до string => "null" та '' (порожня строка)
console.log(3 ** (9 / 3)) // 27 // Пріоритет має ділення => 9/3 = 3. Далі підносимо до ступеня 3**3 = 27
console.log(!!'false' == !!'true') //true // У цьому вся виразі відбувається порівняння між двома логічними значеннями з допомогою оператора порівняння ==.
// Оператор!! використовується для явного перетворення значення логічного типу. Двічі застосований, він перетворює рядок у відповідне булеве значення. В даному випадку, 'false' перетворюється на true, тому що будь-який непустий рядок вважається "справжнім".
// Таким чином, вираз зводиться до порівняння між двома логічними значеннями true. Оскільки обидва операнди рівні, результатом порівняння буде true.
console.log(0 || '0' && 1) // 1 // Пріоритет І && вище за АБО ||. У JS, якщо оператор && має два операнди, він повертає перший "хибний" операнд.
// Якщо обидва операнди "істинні", то повертається останній операнд. '0' вважається "справжнім" у логічному контексті.
// Тому оператор && повертає 1 як останній операнд. 0 ||1 - поверне перше істене значення
console.log((+null == false) < 1)
console.log(false && true || true) // true // Пріоритет І && вище за АБО ||. false && true - поверне false, оскільки один з аргументів false.
// false || true - поверне true, оскільки один з аргументів true. 
console.log(false && (false || true)) // false // (false || true) - поверне true, оскільки один з аргументів true. 
// false && true - поверне false, оскільки один з аргументів false.
console.log((+null == false) < 1 ** 5) // false // +null перетворюється на Number, і оскільки null перетворюється на 0, результатом буде 0.
// false у логічному контексті перетворюється на 0. => +null == false зводиться порівняно 0 == 0, що дає true.
// 1 ** 5 = 1 => true <1 => true перетворюється на 1 =>  1 < 1 = false.
